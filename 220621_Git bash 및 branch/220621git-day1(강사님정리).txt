git 환경 설정

git으로 작성하는 모든 문서에 아래의 내용 추가됨
$ git config --global user.name "Cheongja"
$ git config --global  user.email "cheongja.woo@gmail.com"

-- 리눅스 명령어
$ mkdir  디렉토리명 : 디렉토리 생성
$ rm -r 디렉토리명 :  디렉토리와 디렉토리내의 모든 파일 삭제

$ pwd :  현재 디렉토리정보 확인
$ ls : 현재 디렉토리의 디렉토리명과 파일명 확인
$ ls -l : long format  형식으로 모든 정보 확인
$ ls -a : 히든파일도 확인 -> . 으로 시작하는 파일명도 보임
$ ls -la

-> 디렉토리 이동 
$ cd 디렉토리명 : 하위 디렉토리로 이동
$ cd .. : 상위 디렉토리로 이동
$ cd c:/users

-> 상대경로 연습
-> 상위 디렉토리의 사용자명 아래의 GIT-DIR 로 이동
$ cd ../hpe/git-dir
$ pwd

-- 문서 편집
$ vi ->  편집기 창 뜸 
 i, a : 문서 편집 -> 명령어 모드로 전환 : esc key
 :wq -> 문서 저장하고 편집기 나감
 :w 파일명 -> 새로운 이름으로 저장
 :q -> 편집기 뻐져 나가기
 :q! -> 수정된 내용 저장하지 않고 편집기 종료
 dd -> 커서가 있는 라인 삭제
 x : 한 글자 삭제
 cw : 단어 수정 -> esc 키로 수정 종료
 r : 한글자 수정
 
$ cat 파일명 -> 화면에 파일 내용 출력
$ cat > 파일명 -> 키보드에서 입력한 내용을 파일에 저장, 종료는 ctrl + c
 

-- git 
--초기화
$ git init  -> .git 디렉토리가 생성됨
$ git add 파일명 : 스테이지에 파일 올림
$ git commit -m '메세지' :  스테이지에 있는 파일을 레퍼지토리에 저장
$ git commit -am '메세지' :  수정된 파일을 레퍼지토리에 바로 저장

- git 상태 확인
$ git status

-   git commit  확인
$ git log

$ git log --stat  : 로그의 수정된 정보 확인 

--  저장소와 수정된 파일의 다른 부분 보여주기
$ git diff

-- 마지막 commit 메세지 수정
$ git commit --amend  -> 편집창이 나타남
 -> 메세지 수정 후 저장 
$ git log  -> 수정된 메세지 확인 가능

-- stage에 올라가지 않은 수정된 파일 원래로 되돌리기
$ git restore 파일명
$ git checkout -- 파일명

-- stage의 파일을 내림
$ git add hello2.txt
$ git restore --stage  파일명

-- 마지막 로그 파일로 복구
$ git reset HEAD^

$ git reset --hard  해시키 -> 특정 위치의 파일로 복구

-- git init
-- git add
-- git commit -m '메세지'
-- git status
-- git restore 파일명
-- git restore --stage 파일명
-- git reset HEAD^
-- git reset --hard 해시키


-- git 디렉토리를 생성하면서 초기화
 $ git init manual
     => 
      $ mkdir manual
      $ cd manual
      $ git init
 $ cd manual
 $ (main)
< 1단계 >
 $ vi work.txt
  content 1
 $ git add work.txt
 $ git commit -m 'work 1'

< 2단계 >
 $ vi work.txt
  ->  content 2  내용 추가
 $ git commit -am 'work 2'

< 3단계 >
 $ vi work.txt
  ->  content 3  내용 추가
 $ git commit -am 'work 3'

$ git branch -> 작업하고 있는 브렌치명 출력
-- 브렌치 생성
$ git branch apple

$ git log -> 현재 HEAD 가 가리키고 있는 브렌치명이 보임

$ git branch google
$ git branch ms

$ git checkout main 
$ git branch -> main에 있는지 확인
$ vi work.txt -> main content 4 를 추가 후 저장
$ git commit -am 'main content 4'
$ git log --oneline --branches

$ git checkout apple
$ git branch -> apple branch 확인
$ vi work.txt -> apple content 4 를 추가 후 저장
$ git commit -am 'apple content 4'
$ git log --oneline --branches --graph

$ git log 1브렌치명..2브렌치명 -> 1브렌치에는 없고 2번에만 있는 정보 출력





